/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace LotteryGame {
  export type LotteryStruct = {
    id: PromiseOrValue<BigNumberish>;
    ticket: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    jackpot: PromiseOrValue<BigNumberish>;
    winner: PromiseOrValue<string>;
    participants: PromiseOrValue<string>[];
    state: PromiseOrValue<BigNumberish>;
  };

  export type LotteryStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string[],
    number
  ] & {
    id: BigNumber;
    ticket: BigNumber;
    endTime: BigNumber;
    jackpot: BigNumber;
    winner: string;
    participants: string[];
    state: number;
  };
}

export interface LotteryGameInterface extends utils.Interface {
  functions: {
    "balances(address)": FunctionFragment;
    "checkUpkeep(bytes)": FunctionFragment;
    "createLottery(uint256,uint256)": FunctionFragment;
    "declareWinner(uint256)": FunctionFragment;
    "getLottery(uint256)": FunctionFragment;
    "getOpenLotteriesIds()": FunctionFragment;
    "getParticipationsByUser(address)": FunctionFragment;
    "lotteryId()": FunctionFragment;
    "openLotteries(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "participate(uint256)": FunctionFragment;
    "performUpkeep(bytes)": FunctionFragment;
    "randomWords(uint256)": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "subscriptionId()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balances"
      | "checkUpkeep"
      | "createLottery"
      | "declareWinner"
      | "getLottery"
      | "getOpenLotteriesIds"
      | "getParticipationsByUser"
      | "lotteryId"
      | "openLotteries"
      | "owner"
      | "participate"
      | "performUpkeep"
      | "randomWords"
      | "rawFulfillRandomWords"
      | "subscriptionId"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balances",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createLottery",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "declareWinner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLottery",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenLotteriesIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipationsByUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "lotteryId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "openLotteries",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "participate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "randomWords",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "declareWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLottery", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOpenLotteriesIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipationsByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lotteryId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openLotteries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "LotteryCreated(uint256,uint256,uint256)": EventFragment;
    "ParticipationRegistered(uint256,address)": EventFragment;
    "WinnerDeclared(uint256,address)": EventFragment;
    "WinnerRequested(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LotteryCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParticipationRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WinnerDeclared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WinnerRequested"): EventFragment;
}

export interface LotteryCreatedEventObject {
  id: BigNumber;
  ticketPrice: BigNumber;
  endDate: BigNumber;
}
export type LotteryCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LotteryCreatedEventObject
>;

export type LotteryCreatedEventFilter = TypedEventFilter<LotteryCreatedEvent>;

export interface ParticipationRegisteredEventObject {
  lotteryId: BigNumber;
  user: string;
}
export type ParticipationRegisteredEvent = TypedEvent<
  [BigNumber, string],
  ParticipationRegisteredEventObject
>;

export type ParticipationRegisteredEventFilter =
  TypedEventFilter<ParticipationRegisteredEvent>;

export interface WinnerDeclaredEventObject {
  lotteryId: BigNumber;
  winner: string;
}
export type WinnerDeclaredEvent = TypedEvent<
  [BigNumber, string],
  WinnerDeclaredEventObject
>;

export type WinnerDeclaredEventFilter = TypedEventFilter<WinnerDeclaredEvent>;

export interface WinnerRequestedEventObject {
  lotteryId: BigNumber;
  requestId: BigNumber;
}
export type WinnerRequestedEvent = TypedEvent<
  [BigNumber, BigNumber],
  WinnerRequestedEventObject
>;

export type WinnerRequestedEventFilter = TypedEventFilter<WinnerRequestedEvent>;

export interface LotteryGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LotteryGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    createLottery(
      _ticket: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    declareWinner(
      _lotteryId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getLottery(
      _lotteryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[LotteryGame.LotteryStructOutput]>;

    getOpenLotteriesIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getParticipationsByUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    lotteryId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    openLotteries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    participate(
      _lotteryId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    randomWords(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscriptionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  balances(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkUpkeep(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[boolean, string]>;

  createLottery(
    _ticket: PromiseOrValue<BigNumberish>,
    _duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  declareWinner(
    _lotteryId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getLottery(
    _lotteryId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<LotteryGame.LotteryStructOutput>;

  getOpenLotteriesIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  getParticipationsByUser(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  lotteryId(overrides?: CallOverrides): Promise<BigNumber>;

  openLotteries(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  participate(
    _lotteryId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  performUpkeep(
    performData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  randomWords(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rawFulfillRandomWords(
    requestId: PromiseOrValue<BigNumberish>,
    randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    createLottery(
      _ticket: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    declareWinner(
      _lotteryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getLottery(
      _lotteryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<LotteryGame.LotteryStructOutput>;

    getOpenLotteriesIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    getParticipationsByUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    lotteryId(overrides?: CallOverrides): Promise<BigNumber>;

    openLotteries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    participate(
      _lotteryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    randomWords(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "LotteryCreated(uint256,uint256,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      ticketPrice?: PromiseOrValue<BigNumberish> | null,
      endDate?: null
    ): LotteryCreatedEventFilter;
    LotteryCreated(
      id?: PromiseOrValue<BigNumberish> | null,
      ticketPrice?: PromiseOrValue<BigNumberish> | null,
      endDate?: null
    ): LotteryCreatedEventFilter;

    "ParticipationRegistered(uint256,address)"(
      lotteryId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null
    ): ParticipationRegisteredEventFilter;
    ParticipationRegistered(
      lotteryId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null
    ): ParticipationRegisteredEventFilter;

    "WinnerDeclared(uint256,address)"(
      lotteryId?: PromiseOrValue<BigNumberish> | null,
      winner?: PromiseOrValue<string> | null
    ): WinnerDeclaredEventFilter;
    WinnerDeclared(
      lotteryId?: PromiseOrValue<BigNumberish> | null,
      winner?: PromiseOrValue<string> | null
    ): WinnerDeclaredEventFilter;

    "WinnerRequested(uint256,uint256)"(
      lotteryId?: PromiseOrValue<BigNumberish> | null,
      requestId?: PromiseOrValue<BigNumberish> | null
    ): WinnerRequestedEventFilter;
    WinnerRequested(
      lotteryId?: PromiseOrValue<BigNumberish> | null,
      requestId?: PromiseOrValue<BigNumberish> | null
    ): WinnerRequestedEventFilter;
  };

  estimateGas: {
    balances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createLottery(
      _ticket: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    declareWinner(
      _lotteryId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getLottery(
      _lotteryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenLotteriesIds(overrides?: CallOverrides): Promise<BigNumber>;

    getParticipationsByUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lotteryId(overrides?: CallOverrides): Promise<BigNumber>;

    openLotteries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    participate(
      _lotteryId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    randomWords(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createLottery(
      _ticket: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    declareWinner(
      _lotteryId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getLottery(
      _lotteryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenLotteriesIds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParticipationsByUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lotteryId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openLotteries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    participate(
      _lotteryId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    randomWords(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscriptionId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
