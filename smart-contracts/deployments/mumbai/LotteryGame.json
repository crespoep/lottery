{
  "address": "0x11481cE73F15aFB6175865220404b86d950F17C7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinatorAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_platformFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CallerIsNotTheOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LotteryAlreadyClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LotteryDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LotteryDurationNotEnough",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LotteryHasNotFinishedYet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughParticipants",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlySimulatedBackend",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerCannotParticipateInLotteries",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TicketPaymentIsNotExact",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TicketPriceNotGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserHasAlreadyParticipated",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "ticketPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endDate",
          "type": "uint256"
        }
      ],
      "name": "LotteryCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "ParticipationRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerDeclared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "WinnerRequested",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ticket",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "createLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "declareWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "getLottery",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ticket",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jackpot",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "enum LotteryGame.State",
              "name": "state",
              "type": "uint8"
            }
          ],
          "internalType": "struct LotteryGame.Lottery",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOpenLotteriesIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "getParticipantsByLotteryId",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getParticipationsByUser",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "participate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "randomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        }
      ],
      "name": "setSubscriptionId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf8ae4c5fd045d6007755834c0ce19c565dfc038b4a5f8567c26d8f5fea12ca65",
  "receipt": {
    "to": null,
    "from": "0x5ca4CC6877D0A9cCec1F2Daa1B060ecaa8a0000f",
    "contractAddress": "0x11481cE73F15aFB6175865220404b86d950F17C7",
    "transactionIndex": 7,
    "gasUsed": "2369042",
    "logsBloom": "0x
    "blockHash": "0xa304866c50bb0786e372daddea71cf371efd3027a4e34383433c8409f3b9aa99",
    "transactionHash": "0xf8ae4c5fd045d6007755834c0ce19c565dfc038b4a5f8567c26d8f5fea12ca65",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 28702621,
        "transactionHash": "0xf8ae4c5fd045d6007755834c0ce19c565dfc038b4a5f8567c26d8f5fea12ca65",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005ca4cc6877d0a9ccec1f2daa1b060ecaa8a0000f",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001d75358209b6000000000000000000000000000000000000000000000000000279e67e7d2d23570000000000000000000000000000000000000000000026b630ffb61150637c1e000000000000000000000000000000000000000000000000025c7148fb236d570000000000000000000000000000000000000000000026b6311d2b46d26d321e",
        "logIndex": 48,
        "blockHash": "0xa304866c50bb0786e372daddea71cf371efd3027a4e34383433c8409f3b9aa99"
      }
    ],
    "blockNumber": 28702621,
    "cumulativeGasUsed": "4549086",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed",
    "0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f",
    "2037",
    "10"
  ],
  "numDeployments": 2,
  "solcInputHash": "395e501a4b9fd140ce0bfdffdfc4e52a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinatorAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerIsNotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LotteryAlreadyClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LotteryDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LotteryDurationNotEnough\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LotteryHasNotFinishedYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughParticipants\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerCannotParticipateInLotteries\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TicketPaymentIsNotExact\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TicketPriceNotGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserHasAlreadyParticipated\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"LotteryCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ParticipationRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerDeclared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"WinnerRequested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"declareWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"getLottery\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jackpot\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"enum LotteryGame.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct LotteryGame.Lottery\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpenLotteriesIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"getParticipantsByLotteryId\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getParticipationsByUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"participate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"}],\"name\":\"setSubscriptionId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Ezequiel Pedro Crespo\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"called by keepers to check if at least one lottery is ready to be closed       It returns the first one ready to be closed that it finds.\",\"returns\":{\"_0\":\"a tuple with boolean and the encoded lottery id to be closed if exists\"}},\"createLottery(uint256,uint256)\":{\"details\":\"creates a new lottery\",\"params\":{\"_duration\":\"how much time the lottery will last in seconds\",\"_ticket\":\"amount of money needed to participate in the lottery\"}},\"declareWinner(uint256)\":{\"details\":\"Requests a random number to oracles and closes the correspondent lottery.       Reverts if the end time has not come yet, if there are not at least two participants or if       this method is called again after randomness is requested but not done.\",\"params\":{\"_lotteryId\":\"lottery id\"}},\"getBalance()\":{\"details\":\"returns an account's balance\",\"returns\":{\"_0\":\"the account\"}},\"getLottery(uint256)\":{\"details\":\"returns a lottery by id\",\"params\":{\"_lotteryId\":\"the lottery id\"},\"returns\":{\"_0\":\"the lottery\"}},\"getOpenLotteriesIds()\":{\"details\":\"returns the ids of the lotteries where winner has not been established yet.       The lotteries may be already closed and randomness requested but not received.\",\"returns\":{\"_0\":\"the list of lotteries ids\"}},\"getParticipantsByLotteryId(uint256)\":{\"details\":\"returns the list of participants in a specific lottery\",\"params\":{\"_lotteryId\":\"lottery id\"},\"returns\":{\"_0\":\"the list of participants\"}},\"getParticipationsByUser(address)\":{\"details\":\"returns a list of lotteries ids which user has participated in\",\"params\":{\"_user\":\"the user address\"},\"returns\":{\"_0\":\"the list of the participations\"}},\"participate(uint256)\":{\"details\":\"adds the caller as a new participant to correspondent lottery\",\"params\":{\"_lotteryId\":\"lottery id\"}},\"performUpkeep(bytes)\":{\"details\":\"called by keeper to initiate the process of requesting a random number       and establish a winner for a specific lottery, after checking again if       conditions are meet for security reasons\",\"params\":{\"performData\":\"encoded id for the lottery sent by checkUpkeep\"}},\"setSubscriptionId(uint64)\":{\"details\":\"sets the subscription id for the VRF\",\"params\":{\"_subscriptionId\":\"the subscription ID\"}},\"withdraw()\":{\"details\":\"withdrawal\"}},\"title\":\"Crypto lottery game\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LotteryGame.sol\":\"LotteryGame\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/KeeperBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract KeeperBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5dc972fdf3a524312e68ef6d2e58bcdaf965d08d9415aefa289207350c2bc85a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./KeeperBase.sol\\\";\\nimport \\\"./interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\\n\",\"keccak256\":\"0xfdb84fea1ee213662ae66b95d4f620be73b7af5ede58be3d330b222b9b566d95\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/LotteryGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {VRFConsumerBaseV2} from \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport {VRFCoordinatorV2Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport {KeeperCompatible} from \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nerror TicketPriceNotGreaterThanZero();\\nerror LotteryDurationNotEnough();\\nerror LotteryClosedToNewParticipants();\\nerror TicketPaymentIsNotExact();\\nerror LotteryHasNotFinishedYet();\\nerror LotteryDoesNotExist();\\nerror CallerIsNotTheOwner();\\nerror OwnerCannotParticipateInLotteries();\\nerror UserHasAlreadyParticipated();\\nerror NotEnoughLINK();\\nerror TransferToWinnerFailed();\\nerror NotEnoughParticipants();\\nerror LotteryAlreadyClosed();\\n\\n/** @author Ezequiel Pedro Crespo\\n *  @title Crypto lottery game\\n */\\ncontract LotteryGame is VRFConsumerBaseV2, KeeperCompatible {\\n    using Counters for Counters.Counter;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct Lottery {\\n        uint256 id;\\n        uint256 ticket;\\n        uint256 endTime;\\n        uint256 jackpot;\\n        address winner;\\n        State state;\\n    }\\n\\n    enum State {\\n        OPEN,\\n        CLOSED,\\n        WINNER_DECLARED\\n    }\\n\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n\\n    uint32 private constant CALLBACK_GAS_LIMIT = 100000;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    uint64 public subscriptionId;\\n    uint256 public platformFee;\\n\\n    bytes32 internal keyHash;\\n\\n    Counters.Counter public lotteryId;\\n    EnumerableSet.UintSet private openLotteries;\\n\\n    VRFCoordinatorV2Interface private coordinator;\\n\\n    address public owner;\\n\\n    mapping(uint256 => Lottery) private lotteryById;\\n    mapping(uint256 => uint256) private lotteryIdByRequestId;\\n    mapping(address => uint256[]) private participationsByUser;\\n    mapping(address => uint256) private balances;\\n    mapping(uint256 => EnumerableSet.AddressSet) private participantsByLotteryId;\\n\\n    uint256[] public randomWords;\\n\\n    event LotteryCreated(uint256 indexed id, uint256 indexed ticketPrice, uint256 endDate);\\n    event ParticipationRegistered(uint256 indexed lotteryId, address indexed user);\\n    event WinnerRequested(uint256 indexed lotteryId, uint256 indexed requestId);\\n    event WinnerDeclared(uint256 indexed lotteryId, address indexed winner);\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) {\\n            revert CallerIsNotTheOwner();\\n        }\\n        _;\\n    }\\n\\n    modifier notOwner() {\\n        if (msg.sender == owner) {\\n            revert OwnerCannotParticipateInLotteries();\\n        }\\n        _;\\n    }\\n\\n    modifier lotteryExist(uint256 _lotteryId) {\\n        Lottery memory _lottery = lotteryById[_lotteryId];\\n        if (_lottery.id == 0) {\\n            revert LotteryDoesNotExist();\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        address _vrfCoordinatorAddress,\\n        bytes32 _keyHash,\\n        uint64 _subscriptionId,\\n        uint256 _platformFee\\n    ) VRFConsumerBaseV2(_vrfCoordinatorAddress) {\\n        coordinator = VRFCoordinatorV2Interface(_vrfCoordinatorAddress);\\n        keyHash = _keyHash;\\n        subscriptionId = _subscriptionId;\\n        owner = msg.sender;\\n        platformFee = _platformFee;\\n    }\\n\\n    /**\\n     *  @dev creates a new lottery\\n     *  @param _ticket amount of money needed to participate in the lottery\\n     *  @param _duration how much time the lottery will last in seconds\\n     */\\n    function createLottery(uint256 _ticket, uint256 _duration) external onlyOwner {\\n        _checkIfTicketPriceIsValid(_ticket);\\n        _checkIfDurationIsValid(_duration);\\n\\n        uint256 _endTime = block.timestamp + _duration;\\n        lotteryId.increment();\\n        uint256 _currentId = lotteryId.current();\\n\\n        lotteryById[_currentId] = Lottery({\\n            id: _currentId,\\n            ticket: _ticket,\\n            endTime: _endTime,\\n            jackpot: 0,\\n            winner: address(0),\\n            state: State.OPEN\\n        });\\n\\n        openLotteries.add(_currentId);\\n\\n        emit LotteryCreated(_currentId, _ticket, _endTime);\\n    }\\n\\n    /**\\n     *  @dev adds the caller as a new participant to correspondent lottery\\n     *  @param _lotteryId lottery id\\n     */\\n    function participate(uint256 _lotteryId) external payable notOwner lotteryExist(_lotteryId) {\\n        Lottery storage _lottery = lotteryById[_lotteryId];\\n\\n        _checkUserHasNotAlreadyParticipated(_lotteryId);\\n        _checkIfLotteryIsOpen(_lottery.state);\\n        _checkIfTicketPaymentIsExact(_lottery.ticket);\\n\\n        _lottery.jackpot += msg.value;\\n        participantsByLotteryId[_lotteryId].add(msg.sender);\\n        participationsByUser[msg.sender].push(_lotteryId);\\n\\n        emit ParticipationRegistered(_lotteryId, msg.sender);\\n    }\\n\\n    /**\\n     *  @dev called by keepers to check if at least one lottery is ready to be closed\\n     *       It returns the first one ready to be closed that it finds.\\n     *  @return a tuple with boolean and the encoded lottery id to be closed if exists\\n     */\\n    function checkUpkeep(bytes calldata) external view override returns (bool, bytes memory) {\\n        bool upkeepNeeded = false;\\n        bytes memory data = bytes(\\\"\\\");\\n\\n        uint256 i = 0;\\n        uint256 numberOfOpenLotteries = openLotteries.length();\\n        while (!upkeepNeeded && i < numberOfOpenLotteries) {\\n            uint256 _lotteryId = openLotteries.at(i);\\n            Lottery memory _lottery = lotteryById[_lotteryId];\\n\\n            if (_keeperConditionsPassed(_lottery)) {\\n                upkeepNeeded = true;\\n                data = abi.encode(_lotteryId);\\n            }\\n            i++;\\n        }\\n\\n        return (upkeepNeeded, data);\\n    }\\n\\n    /**\\n     *  @dev called by keeper to initiate the process of requesting a random number\\n     *       and establish a winner for a specific lottery, after checking again if\\n     *       conditions are meet for security reasons\\n     *  @param performData encoded id for the lottery sent by checkUpkeep\\n     */\\n    function performUpkeep(bytes calldata performData) external override {\\n        uint256 _lotteryId = abi.decode(performData, (uint256));\\n        Lottery memory _lottery = lotteryById[_lotteryId];\\n        if (_keeperConditionsPassed(_lottery)) {\\n            declareWinner(_lotteryId);\\n        }\\n    }\\n\\n    /**\\n     *  @dev withdrawal\\n     */\\n    function withdraw() external {\\n        uint256 _balance = balances[msg.sender];\\n        require(_balance > 0);\\n        balances[msg.sender] = 0;\\n        msg.sender.call{value: _balance}(\\\"\\\");\\n    }\\n\\n    /**\\n     *  @dev returns a list of lotteries ids which user has participated in\\n     *  @param _user the user address\\n     *  @return the list of the participations\\n     */\\n    function getParticipationsByUser(address _user) external view returns (uint256[] memory) {\\n        return participationsByUser[_user];\\n    }\\n\\n    /**\\n     *  @dev returns a lottery by id\\n     *  @param _lotteryId the lottery id\\n     *  @return the lottery\\n     */\\n    function getLottery(uint256 _lotteryId) external view returns (Lottery memory) {\\n        return lotteryById[_lotteryId];\\n    }\\n\\n    /**\\n     *  @dev returns an account's balance\\n     *  @return the account\\n     */\\n    function getBalance() external view returns (uint256) {\\n        return balances[msg.sender];\\n    }\\n\\n    /**\\n     *  @dev returns the list of participants in a specific lottery\\n     *  @param _lotteryId lottery id\\n     *  @return the list of participants\\n     */\\n    function getParticipantsByLotteryId(uint256 _lotteryId) external view returns (address[] memory) {\\n        return participantsByLotteryId[_lotteryId].values();\\n    }\\n\\n    /**\\n     *  @dev returns the ids of the lotteries where winner has not been established yet.\\n     *       The lotteries may be already closed and randomness requested but not received.\\n     *  @return the list of lotteries ids\\n     */\\n    function getOpenLotteriesIds() public view returns (uint256[] memory) {\\n        return openLotteries.values();\\n    }\\n\\n    /**\\n     *  @dev sets the subscription id for the VRF\\n     *  @param _subscriptionId the subscription ID\\n     */\\n    function setSubscriptionId(uint64 _subscriptionId) external {\\n        subscriptionId = _subscriptionId;\\n    }\\n\\n    /** @dev Requests a random number to oracles and closes the correspondent lottery.\\n     *       Reverts if the end time has not come yet, if there are not at least two participants or if\\n     *       this method is called again after randomness is requested but not done.\\n     *  @param _lotteryId lottery id\\n     */\\n    function declareWinner(uint256 _lotteryId) public lotteryExist(_lotteryId) {\\n        Lottery storage _lottery = lotteryById[_lotteryId];\\n\\n        _checkIfLotteryIsOpen(_lottery.state);\\n        _checkIfLotteryHasFinished(_lottery.endTime);\\n        _checkIfThereAreEnoughParticipants(participantsByLotteryId[_lotteryId].length());\\n\\n        uint256 requestId = coordinator.requestRandomWords(\\n            keyHash,\\n            subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            CALLBACK_GAS_LIMIT,\\n            NUM_WORDS\\n        );\\n\\n        lotteryIdByRequestId[requestId] = _lotteryId;\\n        _lottery.state = State.CLOSED;\\n\\n        emit WinnerRequested(_lotteryId, requestId);\\n    }\\n\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomness) internal override {\\n        uint256 _lotteryId = lotteryIdByRequestId[requestId];\\n        Lottery storage _lottery = lotteryById[_lotteryId];\\n\\n        address[] memory _participants = participantsByLotteryId[_lotteryId].values();\\n        address _winner = _participants[randomness[0] % _participants.length];\\n        _lottery.winner = _winner;\\n        balances[_winner] += _lottery.jackpot - ((_lottery.jackpot * platformFee) / 1e2);\\n        balances[owner] += (_lottery.jackpot * platformFee) / 1e2;\\n        _lottery.state = State.WINNER_DECLARED;\\n        openLotteries.remove(_lotteryId);\\n\\n        emit WinnerDeclared(_lotteryId, _winner);\\n        delete lotteryIdByRequestId[requestId];\\n    }\\n\\n    function _checkIfTicketPriceIsValid(uint256 _ticketPrice) private pure {\\n        if (_ticketPrice <= 0) {\\n            revert TicketPriceNotGreaterThanZero();\\n        }\\n    }\\n\\n    function _checkIfDurationIsValid(uint256 _duration) private pure {\\n        if (_duration < 60) {\\n            revert LotteryDurationNotEnough();\\n        }\\n    }\\n\\n    function _checkIfLotteryIsOpen(State _state) private pure {\\n        if (_state != State.OPEN) {\\n            revert LotteryAlreadyClosed();\\n        }\\n    }\\n\\n    function _checkIfTicketPaymentIsExact(uint256 _ticket) private view {\\n        if (msg.value != _ticket) {\\n            revert TicketPaymentIsNotExact();\\n        }\\n    }\\n\\n    function _checkIfLotteryHasFinished(uint256 _endTime) private view {\\n        if (_endTime > block.timestamp) {\\n            revert LotteryHasNotFinishedYet();\\n        }\\n    }\\n\\n    function _checkIfThereAreEnoughParticipants(uint256 _numberOfParticipants) private pure {\\n        if (_numberOfParticipants < 2) {\\n            revert NotEnoughParticipants();\\n        }\\n    }\\n\\n    function _checkUserHasNotAlreadyParticipated(uint256 _lotteryId) private view {\\n        EnumerableSet.AddressSet storage set = participantsByLotteryId[_lotteryId];\\n        if (set.contains(msg.sender)) {\\n            revert UserHasAlreadyParticipated();\\n        }\\n    }\\n\\n    function _keeperConditionsPassed(Lottery memory _lottery) private view returns (bool) {\\n        return (_lottery.endTime < block.timestamp &&\\n            _lottery.state == State.OPEN &&\\n            participantsByLotteryId[_lottery.id].length() > 1);\\n    }\\n}\\n\",\"keccak256\":\"0xb5bf03cff58fb549d0b71d02b404f1e73c6ceea043a1287a3c4749ce110bdd42\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Ezequiel Pedro Crespo",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "called by keepers to check if at least one lottery is ready to be closed       It returns the first one ready to be closed that it finds.",
        "returns": {
          "_0": "a tuple with boolean and the encoded lottery id to be closed if exists"
        }
      },
      "createLottery(uint256,uint256)": {
        "details": "creates a new lottery",
        "params": {
          "_duration": "how much time the lottery will last in seconds",
          "_ticket": "amount of money needed to participate in the lottery"
        }
      },
      "declareWinner(uint256)": {
        "details": "Requests a random number to oracles and closes the correspondent lottery.       Reverts if the end time has not come yet, if there are not at least two participants or if       this method is called again after randomness is requested but not done.",
        "params": {
          "_lotteryId": "lottery id"
        }
      },
      "getBalance()": {
        "details": "returns an account's balance",
        "returns": {
          "_0": "the account"
        }
      },
      "getLottery(uint256)": {
        "details": "returns a lottery by id",
        "params": {
          "_lotteryId": "the lottery id"
        },
        "returns": {
          "_0": "the lottery"
        }
      },
      "getOpenLotteriesIds()": {
        "details": "returns the ids of the lotteries where winner has not been established yet.       The lotteries may be already closed and randomness requested but not received.",
        "returns": {
          "_0": "the list of lotteries ids"
        }
      },
      "getParticipantsByLotteryId(uint256)": {
        "details": "returns the list of participants in a specific lottery",
        "params": {
          "_lotteryId": "lottery id"
        },
        "returns": {
          "_0": "the list of participants"
        }
      },
      "getParticipationsByUser(address)": {
        "details": "returns a list of lotteries ids which user has participated in",
        "params": {
          "_user": "the user address"
        },
        "returns": {
          "_0": "the list of the participations"
        }
      },
      "participate(uint256)": {
        "details": "adds the caller as a new participant to correspondent lottery",
        "params": {
          "_lotteryId": "lottery id"
        }
      },
      "performUpkeep(bytes)": {
        "details": "called by keeper to initiate the process of requesting a random number       and establish a winner for a specific lottery, after checking again if       conditions are meet for security reasons",
        "params": {
          "performData": "encoded id for the lottery sent by checkUpkeep"
        }
      },
      "setSubscriptionId(uint64)": {
        "details": "sets the subscription id for the VRF",
        "params": {
          "_subscriptionId": "the subscription ID"
        }
      },
      "withdraw()": {
        "details": "withdrawal"
      }
    },
    "title": "Crypto lottery game",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1056,
        "contract": "contracts/LotteryGame.sol:LotteryGame",
        "label": "subscriptionId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint64"
      },
      {
        "astId": 1058,
        "contract": "contracts/LotteryGame.sol:LotteryGame",
        "label": "platformFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1060,
        "contract": "contracts/LotteryGame.sol:LotteryGame",
        "label": "keyHash",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 1063,
        "contract": "contracts/LotteryGame.sol:LotteryGame",
        "label": "lotteryId",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Counter)305_storage"
      },
      {
        "astId": 1066,
        "contract": "contracts/LotteryGame.sol:LotteryGame",
        "label": "openLotteries",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(UintSet)842_storage"
      },
      {
        "astId": 1069,
        "contract": "contracts/LotteryGame.sol:LotteryGame",
        "label": "coordinator",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(VRFCoordinatorV2Interface)299"
      },
      {
        "astId": 1071,
        "contract": "contracts/LotteryGame.sol:LotteryGame",
        "label": "owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1076,
        "contract": "contracts/LotteryGame.sol:LotteryGame",
        "label": "lotteryById",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Lottery)1041_storage)"
      },
      {
        "astId": 1080,
        "contract": "contracts/LotteryGame.sol:LotteryGame",
        "label": "lotteryIdByRequestId",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1085,
        "contract": "contracts/LotteryGame.sol:LotteryGame",
        "label": "participationsByUser",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 1089,
        "contract": "contracts/LotteryGame.sol:LotteryGame",
        "label": "balances",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1094,
        "contract": "contracts/LotteryGame.sol:LotteryGame",
        "label": "participantsByLotteryId",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(AddressSet)685_storage)"
      },
      {
        "astId": 1097,
        "contract": "contracts/LotteryGame.sol:LotteryGame",
        "label": "randomWords",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(VRFCoordinatorV2Interface)299": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(State)1045": {
        "encoding": "inplace",
        "label": "enum LotteryGame.State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(AddressSet)685_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)685_storage"
      },
      "t_mapping(t_uint256,t_struct(Lottery)1041_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LotteryGame.Lottery)",
        "numberOfBytes": "32",
        "value": "t_struct(Lottery)1041_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)685_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 684,
            "contract": "contracts/LotteryGame.sol:LotteryGame",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)384_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)305_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 304,
            "contract": "contracts/LotteryGame.sol:LotteryGame",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Lottery)1041_storage": {
        "encoding": "inplace",
        "label": "struct LotteryGame.Lottery",
        "members": [
          {
            "astId": 1029,
            "contract": "contracts/LotteryGame.sol:LotteryGame",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1031,
            "contract": "contracts/LotteryGame.sol:LotteryGame",
            "label": "ticket",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1033,
            "contract": "contracts/LotteryGame.sol:LotteryGame",
            "label": "endTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1035,
            "contract": "contracts/LotteryGame.sol:LotteryGame",
            "label": "jackpot",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1037,
            "contract": "contracts/LotteryGame.sol:LotteryGame",
            "label": "winner",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 1040,
            "contract": "contracts/LotteryGame.sol:LotteryGame",
            "label": "state",
            "offset": 20,
            "slot": "4",
            "type": "t_enum(State)1045"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Set)384_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 379,
            "contract": "contracts/LotteryGame.sol:LotteryGame",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 383,
            "contract": "contracts/LotteryGame.sol:LotteryGame",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)842_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 841,
            "contract": "contracts/LotteryGame.sol:LotteryGame",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)384_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}